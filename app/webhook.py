from fastapi import FastAPI, Request, HTTPException
from aiogram.types import Update
from app.bot import bot, dp
from app.handlers import router as default_router
from app.business import router as business_router
import os

# –ü–æ–ª—É—á–∞–µ–º —Å–µ–∫—Ä–µ—Ç –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
WEBHOOK_SECRET = os.getenv("WEBHOOK_SECRET")

# –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Ä–æ—É—Ç–µ—Ä—ã
dp.include_router(business_router)   # üíº –°–Ω–∞—á–∞–ª–∞ –±–∏–∑–Ω–µ—Å
dp.include_router(default_router)    # üë§ –ü–æ—Ç–æ–º –æ–±—ã—á–Ω—ã–µ

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è FastAPI
app = FastAPI()

# –ö–æ—Ä–Ω–µ–≤–æ–π —ç–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞
@app.get("/")
async def root():
    return {"status": "ok"}

# Webhook-—ç–Ω–¥–ø–æ–∏–Ω—Ç
@app.post("/webhook/{secret}")
async def telegram_webhook(secret: str, request: Request):
    if secret != WEBHOOK_SECRET:
        raise HTTPException(status_code=403, detail="Invalid webhook secret")

    try:
        data = await request.json()
        update = Update.model_validate(data, strict=False)
        await dp.feed_update(bot, update)
    except Exception as e:
        print(f"‚ùå Webhook processing error: {e}")
        raise HTTPException(status_code=500, detail="Webhook error")

    return {"ok": True}
